import{j as e,f as x,a as r,b as a,p as s,O as j,x as f,n as b,M as k,R as z,N as v,h as i,$ as y,P as q,s as h,i as w,c as m,d as P,e as N,g as _}from"../chunks/chunk-BhELJTGN.js";import{f as t}from"../chunks/chunk-BiimETKd.js";import{e as L}from"../chunks/chunk-CevxxO66.js";import{l as o}from"../chunks/chunk-xonkdfrU.js";/* empty css                      */const p=void 0,O=void 0,I=[],T=[],S=({})=>e.jsxs(x,{className:"w-body cef8lky c3i1u3x cgzpa1h",children:[e.jsxs(r,{className:"w-box cxit5en cogsgih ctdzyps ce19egy",children:[e.jsx(a,{href:"/",className:"w-link",children:e.jsx(s,{src:"/assets/Logo_fgtINaQGBFFapgXNvmtgD.png",width:405,height:451,className:"w-image c942crn c1uzvt68 cp3a1ni"})}),e.jsxs(j,{children:[e.jsx(f,{children:e.jsx(b,{className:"w-button c1ya628u c10ua9p1 c1qy06sr cpbg552 cshxx6g c1lub6ji c77fen c1kt3hjx c1geiwv ckcg2od cealztw cvs4hrp comp0x6 cqpuunw c1wvok5d c1eikf4o c1iwr2ut c1l088 c1fh3e63 c14zbtl7 c14xknmu c1mkwhsj c50kpvg c1tup317 c1lxdi4i c1xm82re caz9sw9 c3ke8ei c1vra1wj c1rkfrji c1t36fdn c1twcrqe",children:e.jsx(s,{src:"/assets/burger_H_E62dUjUdnjYrHNINiU_.png",width:100,height:100,className:"w-image"})})}),e.jsx(k,{className:"w-dialog-overlay c1n92csm c1e0yeox cpjqu7u csvz69a c62v901 cnpumd1 c15kyzwk c1yxak60 cbe9vyj cqsyioe c13jgw8t ccvhcq8",children:e.jsxs(z,{className:"w-dialog-content c1s06m5q cnpumd1 cbe9vyj cqsyioe c15zk8e1 cb947cc c10ury7n ckwfs5l c14zbtl7 c13gmqhk cpg64ub cxu11uu c6t5zc4 chqhe2i c1e23wal c12pfuk9 ci1jhro c1xyla5v",children:[e.jsx(r,{tag:"nav",role:"navigation",className:"w-box",children:e.jsxs(r,{className:"w-box cbe9vyj cqsyioe c1p8wosj c1wpxkon",children:[e.jsx(v,{className:"w-dialog-title c19otp7c c1tpu3fb cmup7a7 c12hhjv2 cwvbj7b cmkc8rd",children:"ESP32"}),e.jsx(a,{href:"/esp32/getting-started",className:"w-link c3j6eu6 cw8wk4g c1n8335o cnrqlv9 c1aj0wmm c5lna9m c19bzeoe c6gts8m cywnn7c cgpqfz5 c16mm8xg c8gwi5u c17dfjxw c1opx329 c1upkxol c1dukfjv c920vq8 c1drgsit co8ar9d c1d5e9u5 c14ghf94 c1u5brzr cef8lky c1j915ev chewl0k cks4e9z cs1n5w0 c1q5912w c1szy17v ci6o494 c17d547z c1dme089 c13gmqhk c1gw1tt6",children:e.jsx(i,{className:"w-bold-text",children:"Getting Started"})}),e.jsx(a,{href:"/esp32/getting-started",className:"w-link c3j6eu6 cw8wk4g c1n8335o cnrqlv9 c1aj0wmm c5lna9m c19bzeoe c6gts8m cywnn7c cgpqfz5 c16mm8xg c8gwi5u c17dfjxw c1opx329 c1upkxol c1dukfjv c920vq8 c1drgsit co8ar9d c1d5e9u5 clhuzwz c1u5brzr cef8lky c1j915ev chewl0k cks4e9z cs1n5w0 c1q5912w c1szy17v ci6o494 c17d547z c1dme089 c13gmqhk c1gw1tt6",children:e.jsx(i,{className:"w-bold-text",children:"RGB Server"})}),e.jsx(a,{href:"/esp32/wifi-scanner",className:"w-link c3j6eu6 cw8wk4g c1n8335o cnrqlv9 c1aj0wmm c5lna9m c19bzeoe c6gts8m cywnn7c cgpqfz5 c16mm8xg c8gwi5u c17dfjxw c1opx329 c1upkxol c1dukfjv c920vq8 c1drgsit co8ar9d c1d5e9u5 clhuzwz c1u5brzr cef8lky c1j915ev chewl0k cks4e9z cs1n5w0 c1q5912w c1szy17v ci6o494 c17d547z c1dme089 c13gmqhk c1gw1tt6",children:e.jsx(i,{className:"w-bold-text",children:"WIFI Scanner"})}),e.jsx(a,{href:"/esp32/ir-alarm",className:"w-link c3j6eu6 cw8wk4g c1n8335o cnrqlv9 c1aj0wmm c5lna9m c19bzeoe c6gts8m cywnn7c cgpqfz5 c16mm8xg c8gwi5u c17dfjxw c1opx329 c1upkxol c1dukfjv c920vq8 c1drgsit co8ar9d c1d5e9u5 clhuzwz c1u5brzr cef8lky c1j915ev chewl0k cks4e9z cs1n5w0 c1q5912w c1szy17v ci6o494 c17d547z c1dme089 c13gmqhk c1gw1tt6",children:e.jsx(i,{className:"w-bold-text",children:"IR Alarm"})}),e.jsx(a,{href:"/esp32/potentiometer",className:"w-link c3j6eu6 cw8wk4g c1n8335o cnrqlv9 c1aj0wmm c5lna9m c19bzeoe c6gts8m cywnn7c cgpqfz5 c16mm8xg c8gwi5u c17dfjxw c1opx329 c1upkxol c1dukfjv c920vq8 c1drgsit co8ar9d c1d5e9u5 clhuzwz c1u5brzr cef8lky c1j915ev chewl0k cks4e9z cs1n5w0 c1q5912w c1szy17v ci6o494 c17d547z c1dme089 c13gmqhk c1gw1tt6",children:e.jsx(i,{className:"w-bold-text",children:"Potentiometer"})})]})}),e.jsx(y,{className:"w-close-button c193n3ab c11gcw2s ci9xck c164arb c1mydgbc chzyyxd c1rkdclf cspx8cz cbe9vyj c1qy06sr cpbg552 c17x55us cpbtfu3 c1uqrecz c350vec cwwj380 ci4hcet c2ls53r cjhbkuo",children:e.jsx(q,{code:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor" width="100%" height="100%" style="display: block;"><path fill-rule="evenodd" d="M13.566 2.434a.8.8 0 0 1 0 1.132L9.13 8l4.435 4.434a.8.8 0 0 1-1.132 1.132L8 9.13l-4.434 4.435a.8.8 0 0 1-1.132-1.132L6.87 8 2.434 3.566a.8.8 0 0 1 1.132-1.132L8 6.87l4.434-4.435a.8.8 0 0 1 1.132 0Z" clip-rule="evenodd"/></svg>',className:"w-html-embed"})})]})})]})]}),e.jsxs(r,{className:"w-box ce19egy c1h1nl5c c13gmqhk cogsgih c16bzkdh c13ckunz cn13o9d c1tszs9s c1mmoi84 cw4dc5j c1933afg c1cl6xrl cex20e6",children:[e.jsxs(h,{className:"w-text chewl0k cs8jnol c1d73b5o c192du2r c136d2hq cnykfat",children:["Keep in mind these resistor colors",e.jsx(L,{href:"/esp32/abc/secret",className:"w-rich-text-link cef8lky c1u5brzr c1pr4ejo",children:"!"})]}),e.jsxs(r,{className:"w-box c1h1nl5c c13gmqhk ckfm5zf c1f1okbg ch1fyv9 cwo00xu cotpzvh ccwx88h c11693zx co8eotk",children:[e.jsx(s,{src:"/assets/Capture_d__cran_2024-12-03_160109_PJ2UudRaJD8_bza_X_OKG.png",width:389,height:147,className:"w-image c1v19npp c13gmqhk c1q9b457 cgy3e4m"}),e.jsx(s,{src:"/assets/Capture_d__cran_2024-12-03_160212_eOl_PoBJ8HHeWHs-g4RPi.png",width:390,height:152,className:"w-image c1h1nl5c c19otp7c c14dh9mz c1st55tw c3793j1 c1uzvt68 cw8wk4g c1vcoo9v c3j6eu6 c1xui7l2"}),e.jsx(s,{src:"/assets/Capture_d__cran_2024-12-03_155524_dbw-G-XKY1jhwxOwFXklI.png",width:396,height:149,className:"w-image c1h1nl5c c13gmqhk c1uzvt68 c3793j1 c14zbtl7"})]})]}),e.jsxs(r,{className:"w-box",children:[e.jsx(h,{className:"w-text c1jsn5zb camnv7y c1j6gywh",children:e.jsx(h,{tag:"span",className:"w-text",children:e.jsx(i,{className:"w-bold-text c1c7894k",children:"Potentiometer - Programming"})})}),e.jsxs(t,{className:"w-paragraph ck3rk9r cz5s00m cgzpa1h c1g05gyx",children:["In this page we'll see how to take an analog input from a potentiometer and we will try understanding the code that makes everything work as we go.","",e.jsx("br",{}),"","",e.jsx("br",{}),"","First let's start with the wiring","",e.jsx("br",{}),"","",e.jsx("br",{}),"","Here is what we will need:","",e.jsx("br",{}),"","Of course the esp32","",e.jsx("br",{}),"","One green LED, one yellow LED and one red LED","",e.jsx("br",{}),"","A potentiometer","",e.jsx("br",{}),"","Three 220 Ohm resistors","",e.jsx("br",{}),"","A breadboard","",e.jsx("br",{}),"","And enough cables!"]}),e.jsx(s,{src:"/assets/IMG_20241211_101931112_2_JXC4B3mOPH1RXC6guWxPw.jpg",width:3072,height:2999,className:"w-image cw8wk4g c1n8335o czlur6q c1h1nl5c c13gmqhk c172k6fa c1y7eg9h cjp0mtu ce6iim8 c1mlptfz"}),e.jsx(t,{className:"w-paragraph ck3rk9r cz5s00m cgzpa1h c1g05gyx",children:"First we'll wire the LED'S while keeping in mind that the long side is the one that will connect to a GPIO and the short side willl be a ressistor"}),e.jsx(s,{src:"/assets/IMG_20241211_102042183_dcmLVknu5GBMzb4dmS7ws.jpg",width:3072,height:4080,className:"w-image cw8wk4g c1n8335o c8ma4xc c1h1nl5c c13gmqhk cjgvxtl c1y7eg9h cjp0mtu ce6iim8 c1mlptfz"}),e.jsx(s,{src:"/assets/IMG_20241211_102449740_BOa4K2FwQaWdlKqufJqZ4.jpg",width:3072,height:4080,className:"w-image cw8wk4g c1n8335o cs0t62 c1h1nl5c c13gmqhk cjgvxtl c1y7eg9h cjp0mtu ce6iim8 c1mlptfz"}),e.jsx(t,{className:"w-paragraph ck3rk9r cz5s00m cgzpa1h c1g05gyx",children:"Then we'll wire the potentiometer as follows:"}),e.jsx(s,{src:"/assets/pot_EwHnzpTi_n8-f4I6mxQu7.png",width:1967,height:2473,className:"w-image cw8wk4g c1n8335o cs0t62 c1h1nl5c c13gmqhk cjgvxtl c1y7eg9h cjp0mtu ce6iim8 c1mlptfz"}),e.jsxs(t,{className:"w-paragraph ck3rk9r cz5s00m cgzpa1h c1g05gyx",children:["Here is how the full wiring should look like, make sure to connect the ground pin on the esp32 to the minus bands on the bread board","",e.jsx("br",{}),"","so the potentiometer and all the resistors can go there"]}),e.jsx(s,{src:"/assets/IMG_20241211_103650674_LAqxOgsJwdbHZQDCRPc_o.jpg",width:4080,height:3072,className:"w-image cw8wk4g c1n8335o cs0t62 c1h1nl5c c13gmqhk ck6xvn2 c1y7eg9h cjp0mtu ce6iim8 c1mlptfz"}),e.jsxs(t,{className:"w-paragraph ck3rk9r cz5s00m cgzpa1h c1g05gyx",children:["when connecting the potentiometer to the esp32 make sure to connect it to one of the GPIO pins that has the ADC2 function.","",e.jsx("br",{}),"","here is a picture showing what each pin has"]}),e.jsx(s,{src:"/assets/Capture_d__cran_2024-12-16_104311_2-quu5zsxIVfwOsnKUzQG.png",width:1309,height:745,className:"w-image cw8wk4g c1n8335o cs0t62 c1h1nl5c c13gmqhk ck6xvn2 c1y7eg9h cjp0mtu ce6iim8 c1mlptfz"}),e.jsxs(t,{className:"w-paragraph ck3rk9r cz5s00m cgzpa1h c1g05gyx",children:["With this done we can move onto the programming!","",e.jsx("br",{}),"","",e.jsx("br",{}),"","Let's start by making a new sketch you should get something like this:"]}),e.jsx(o,{code:`void setup() {
  // put your setup code here, to run once:

}

void loop() {
  // put your main code here, to run repeatedly:

}
`,lang:"C++",className:"w-code-text c1w06jcf ctqz4wr c1vdhz6d c6hmisz cvu7fmi c171rush cl7p029 c1jrsk1n c162scq1 czz4g3l csrfvpb c4c2ush"}),e.jsxs(t,{className:"w-paragraph ck3rk9r cz5s00m cgzpa1h c1g05gyx",children:["Any code written within void setup will run once at the very start of the program","",e.jsx("br",{}),"","and any code written within loop will run, like the name says on loop","",e.jsx("br",{}),"","You can also use the space above void setup to declare global variables like this:"]}),e.jsx(o,{code:`const int rLedPin = 18;
const int yLedPin = 19;
const int gLedPin = 21;
const int potPin = 4;
int potVal = 0;

void setup() {

}
`,lang:"C++",className:"w-code-text c1w06jcf ctqz4wr c1vdhz6d c6hmisz cvu7fmi c171rush cl7p029 c1jrsk1n c162scq1 czz4g3l csrfvpb c4c2ush"}),e.jsxs(t,{className:"w-paragraph ck3rk9r cz5s00m cgzpa1h c1g05gyx",children:["const meaning constant defines a veriable that does not change throughout the entire program","",e.jsx("br",{}),"","int defines a variable that consists of a whole number","",e.jsx("br",{}),"","",e.jsx("br",{}),"","rLedPin, yLedPin and gLedPin declare the GPIO port that you used for each led, so when writing your code for this make sure to update these to be accurate to your real wiring!","",e.jsx("br",{}),"","",e.jsx("br",{}),"","potPin is similar and defines the pin of the potentiometer","",e.jsx("br",{}),"","",e.jsx("br",{}),"","potVal is a veriable that we will use later on that will help us store the current value of the Potentiometer, which is why this isn't a constant as it will change","",e.jsx("br",{}),"","",e.jsx("br",{}),"","now, here is what we will be writing in the setup:"]}),e.jsx(o,{code:`void setup() {
  Serial.begin(115200);
  pinMode(rLedPin, OUTPUT);
  pinMode(yLedPin, OUTPUT);
  pinMode(gLedPin, OUTPUT);
}`,lang:"C++",className:"w-code-text c1w06jcf ctqz4wr c1vdhz6d c6hmisz cvu7fmi c171rush cl7p029 c1jrsk1n c162scq1 czz4g3l csrfvpb c4c2ush"}),e.jsxs(t,{className:"w-paragraph ck3rk9r cz5s00m cgzpa1h c1g05gyx",children:["Serial.begin(number) will start the serial console for debugging that we have used in previous tutorials, the number sets the baud rate that will be used, the one we typically use being 115200","",e.jsx("br",{}),"","",e.jsx("br",{}),"","pinMode(pin, OUTPUT) ","",e.jsx("br",{}),"","declares wether a selected pin is an INPUT or an OUTPUT, we use the constants we declared earlier instead of the pin number so that we make the code more understandable at a glance and easily adaptable","",e.jsx("br",{}),"","",e.jsx("br",{}),"","for example if we were using a pushbutton we would declare","",e.jsx("br",{}),"","pinMode(buttonPin, INPUT)","",e.jsx("br",{}),"","instead, this is however not required for the analog potentiometer we will be using","",e.jsx("br",{}),"","",e.jsx("br",{}),"","also very Important to remember, ; marks the end of a line!","",e.jsx("br",{}),"","",e.jsx("br",{}),"","now, let's begin programming our loop program:"]}),e.jsx(o,{code:`void loop() {
  potVal = analogRead(potPin);
  Serial.println(potVal);
}`,lang:"C++",className:"w-code-text c1w06jcf ctqz4wr c1vdhz6d c6hmisz cvu7fmi c171rush cl7p029 c1jrsk1n c162scq1 czz4g3l csrfvpb c4c2ush"}),e.jsxs(t,{className:"w-paragraph ck3rk9r cz5s00m cgzpa1h c1g05gyx",children:["analogRead(potPin) will return the current value of our analog potentiometer, we store this in our variable potVal so that we can use it later in the code for conditions","",e.jsx("br",{}),"","",e.jsx("br",{}),"","Serial.println(potVal); will send the potentiometers value to the debugging console so we can easily look for problems if there are any","",e.jsx("br",{}),"","",e.jsx("br",{}),"","we will now program the conditions that will light up the leds, keep in mind that the potentiometer goes from values 0 to 4095:"]}),e.jsx(o,{code:`void loop() {
  potVal = analogRead(potPin);
  Serial.println(potVal);

  if (potVal <= 1000) {
    digitalWrite(rLedPin, HIGH);
  } else {
    digitalWrite(rLedPin, LOW);
  }
}`,lang:"C++",className:"w-code-text c1w06jcf ctqz4wr c1vdhz6d c6hmisz cvu7fmi c171rush cl7p029 c1jrsk1n c162scq1 czz4g3l csrfvpb c4c2ush"}),e.jsxs(t,{className:"w-paragraph ck3rk9r cz5s00m cgzpa1h c1g05gyx",children:["we start by making an if statement and inside the () we write the actual condition","",e.jsx("br",{}),"","in this case being:","",e.jsx("br",{}),"","if the value of the potentiometer is lesser than or equals to 1000","",e.jsx("br",{}),"","if those conditions are met we execute the code inside the {} brackets","",e.jsx("br",{}),"","",e.jsx("br",{}),"","in our case it is digitalWrite(pin, HIGH) which will send a message to the GPIO pin we specified asking for it to be at the high value","",e.jsx("br",{}),"","at the end of our } bracket we type else and start new brackets. this will execute code if the condition above was NOT met, in our case if isn't met we send a message to the GPIO setting it to LOW","",e.jsx("br",{}),"","",e.jsx("br",{}),"","Let's write the rest of the conditions for the rest of the LED's"]}),e.jsx(o,{code:`void loop() {
  potVal = analogRead(potPin);
  Serial.println(potVal);

  if (potVal <= 1000) {
    digitalWrite(rLedPin, HIGH);
  } else {
    digitalWrite(rLedPin, LOW);
  }

  if (potVal <= 2000 && potVal >= 1001) {
    digitalWrite(yLedPin, HIGH);
  } else {
    digitalWrite(yLedPin, LOW);
  }

  if (potVal <= 3000 && potVal >= 2001) {
    digitalWrite(gLedPin, HIGH);
  } else {
    digitalWrite(gLedPin, LOW);
  }
}`,lang:"C++",className:"w-code-text c1w06jcf ctqz4wr c1vdhz6d c6hmisz cvu7fmi c171rush cl7p029 c1jrsk1n c162scq1 czz4g3l csrfvpb c4c2ush"}),e.jsxs(t,{className:"w-paragraph ck3rk9r cz5s00m cgzpa1h c1g05gyx",children:["for the next if conditions we will need to check if the potentiometer value is lesser than AND higher than a value so that we can have a specific range of it being active, we declare and and statement inside of an if statement by typing && and then typing the other condition.","",e.jsx("br",{}),"","then we do the same thing for the else conditions as we did before","",e.jsx("br",{}),"","",e.jsx("br",{}),"","this should be all that we need to go you may now send the full code to the board and test it out!","",e.jsx("br",{}),"","here is the full code but I recommend you follow along with the steps above instead of just copying it"]}),e.jsx(o,{code:`const int rLedPin = 18;
const int yLedPin = 19;
const int gLedPin = 21;
const int potPin = 4;
int potVal = 0;

void setup() {
  Serial.begin(115200); // Starts Serial for debugging
  pinMode(rLedPin, OUTPUT);
  pinMode(yLedPin, OUTPUT);
  pinMode(gLedPin, OUTPUT);
}

void loop() {
  potVal = analogRead(potPin);
  Serial.println(potVal);

  if (potVal <= 1000) {
    digitalWrite(rLedPin, HIGH);
  } else {
    digitalWrite(rLedPin, LOW);
  }

  if (potVal <= 2000 && potVal >= 1001) {
    digitalWrite(yLedPin, HIGH);
  } else {
    digitalWrite(yLedPin, LOW);
  }

  if (potVal <= 3000 && potVal >= 2001) {
    digitalWrite(gLedPin, HIGH);
  } else {
    digitalWrite(gLedPin, LOW);
  }
}`,lang:"C++",className:"w-code-text c1w06jcf ctqz4wr c1vdhz6d c6hmisz cvu7fmi c171rush cl7p029 c1jrsk1n c162scq1 czz4g3l csrfvpb c4c2ush"})]}),e.jsxs(r,{className:"w-box",children:[e.jsx(a,{href:"/",className:"w-link c3j6eu6 cw8wk4g c1n8335o cnrqlv9 c1aj0wmm c5lna9m c19bzeoe c6gts8m cywnn7c cgpqfz5 c16mm8xg c8gwi5u c17dfjxw c1opx329 c1upkxol c1dukfjv c920vq8 c1drgsit co8ar9d c1d5e9u5 c1h1nl5c c13gmqhk c1hqpamb c1u5brzr cef8lky c1rvw9cl chewl0k cks4e9z cwqrhhf c1q5912w c1szy17v ci6o494 c17d547z c1dme089 ce6mn25",children:e.jsxs(h,{tag:"span",className:"w-text",children:[" ",e.jsx(i,{className:"w-bold-text",children:"NEXT"})]})}),e.jsx(a,{href:"/",className:"w-link c3j6eu6 cw8wk4g c1n8335o cnrqlv9 c1aj0wmm c5lna9m c19bzeoe c6gts8m c1u4q7z0 cgpqfz5 c16mm8xg c8gwi5u c17dfjxw c1opx329 c1upkxol c1dukfjv c920vq8 c1drgsit c16mmw3b c1d5e9u5 c1h1nl5c c13gmqhk cghu1xd c1u5brzr cef8lky c1rvw9cl chewl0k cks4e9z cwqrhhf c1q5912w c1szy17v ci6o494 c17d547z c1dme089 ce6mn25",children:e.jsx(i,{className:"w-bold-text",children:"HOME"})})]})]}),U=({data:l})=>{const{pageMeta:c}=l,{origin:g}=new URL(l.url);let d=c.socialImageUrl;return c.socialImageAssetName&&(d=`${g}${w({src:c.socialImageAssetName,format:"raw"})}`),e.jsxs(e.Fragment,{children:[l.url&&e.jsx("meta",{property:"og:url",content:l.url}),e.jsx("title",{children:c.title}),e.jsx("meta",{property:"og:title",content:c.title}),c.description&&e.jsxs(e.Fragment,{children:[e.jsx("meta",{name:"description",content:c.description}),e.jsx("meta",{property:"og:description",content:c.description})]}),e.jsx("meta",{property:"og:type",content:"website"}),p,d&&e.jsx("meta",{property:"og:image",content:c.socialImageUrl}),p,c.excludePageFromSearch&&e.jsx("meta",{name:"robots",content:"noindex, nofollow"}),c.custom.map(({property:n,content:u})=>e.jsx("meta",{property:n,content:u},n)),O,I.map(n=>e.jsx("link",{rel:"preload",href:`${m}${n.name}`,as:"font",crossOrigin:"anonymous"},n.id)),T.map(n=>e.jsx("link",{rel:"preload",href:`${m}${n.name}`,as:"image"},n.id))]})},H=Object.freeze(Object.defineProperty({__proto__:null,Head:U},Symbol.toStringTag,{value:"Module"})),V=({data:l})=>{const{system:c,resources:g,url:d}=l;return e.jsx(P.Provider,{value:{imageLoader:w,assetBaseUrl:m,imageBaseUrl:N,resources:g},children:e.jsx(S,{system:c},d)})},W=Object.freeze(Object.defineProperty({__proto__:null,default:V},Symbol.toStringTag,{value:"Module"})),D={isClientRuntimeLoaded:{type:"computed",definedAtData:null,valueSerialized:{type:"js-serialized",value:!0}},onBeforeRenderEnv:{type:"computed",definedAtData:null,valueSerialized:{type:"js-serialized",value:null}},dataEnv:{type:"computed",definedAtData:null,valueSerialized:{type:"js-serialized",value:{server:!0}}},onRenderClient:{type:"standard",definedAtData:{filePathToShowToUser:"/renderer/+onRenderClient.tsx",fileExportPathToShowToUser:[]},valueSerialized:{type:"plus-file",exportValues:_}},Head:{type:"standard",definedAtData:{filePathToShowToUser:"/pages/esp32/potentiometer/+Head.tsx",fileExportPathToShowToUser:[]},valueSerialized:{type:"plus-file",exportValues:H}},Page:{type:"standard",definedAtData:{filePathToShowToUser:"/pages/esp32/potentiometer/+Page.tsx",fileExportPathToShowToUser:[]},valueSerialized:{type:"plus-file",exportValues:W}}};export{D as configValuesSerialized};
